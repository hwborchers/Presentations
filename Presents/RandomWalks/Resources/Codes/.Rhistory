install.packages("dqrng")
install.packages("qrandom")
.Random.seed
randu
?randu
randTAoCP <- function(seed) {
if (is.null(seed) | length(seed != 100))
stop("'seed' must provide 100 numbers in ]0,1[.")
local({
R <- vector(mode = "numeric", length = 2000)
R[1:100] <- c(seed)
for (k in 101:2000)
R[k] <- (R[k-37] + R[k-100] %% 1
k <- 2000; i <- 2000 - 37; j <- 2000 - 100
frand <- function() {
k <<- (k %% 2000) + 1
i <<- (i %% 2000) + 1
j <<- (j %% 2000) + 1
z <- (R[i] + R[j] %% 1
R[k] <<- z
return(z)
}
return(frand)
})
}
randTAoCP <- function(seed) {
if (is.null(seed) | length(seed != 100))
stop("'seed' must provide 100 numbers in ]0,1[.")
local({
R <- vector(mode = "numeric", length = 2000)
R[1:100] <- c(seed)
for (k in 101:2000)
R[k] <- (R[k-37] + R[k-100]) %% 1
k <- 2000; i <- 2000 - 37; j <- 2000 - 100
frand <- function() {
k <<- (k %% 2000) + 1
i <<- (i %% 2000) + 1
j <<- (j %% 2000) + 1
z <- (R[i] + R[j]) %% 1
R[k] <<- z
return(z)
}
return(frand)
})
}
.Random.seed[1:100]
knuth <- .Random.seed[1:100]
N <- 30000; r <- numeric(N)
for (i in 1:N) r[i] <- knuth()
hist(x)
knuth
randTAoCP <- function(seed) {
if (is.null(seed) | length(seed != 100))
stop("'seed' must provide 100 numbers in ]0,1[.")
local({
R <- vector(mode = "numeric", length = 2000)
R[1:100] <- c(seed)
for (k in 101:2000)
R[k] <- (R[k-37] + R[k-100]) %% 1
k <- 2000; i <- 2000 - 37; j <- 2000 - 100
frand <- function() {
k <<- (k %% 2000) + 1
i <<- (i %% 2000) + 1
j <<- (j %% 2000) + 1
z <- (R[i] + R[j]) %% 1
R[k] <<- z
return(z)
}
return(frand)
})
}
seed
seed <- .Random.seed[1:100]
seeed
seed
knuth <- randTAoCP(seed)
seed
length(seed)
`?.Random.seed
?.Random.seed
# USAGE:
seed <- qrandom::qrandomunif(n = 100, a = 0, b = 1)
randTAoCP <- function(seed) {
if (is.null(seed) | length(seed) != 100)
stop("'seed' must provide 100 numbers in ]0,1[.")
local({
R <- vector(mode = "numeric", length = 2000)
R[1:100] <- c(seed)
for (k in 101:2000)
R[k] <- (R[k-37] + R[k-100]) %% 1
k <- 2000; i <- 2000 - 37; j <- 2000 - 100
frand <- function() {
k <<- (k %% 2000) + 1
i <<- (i %% 2000) + 1
j <<- (j %% 2000) + 1
z <- (R[i] + R[j]) %% 1
R[k] <<- z
return(z)
}
return(frand)
})
}
knuth <- randTAoCP(seed)
N <- 30000; r <- numeric(N)
for (i in 1:N) r[i] <- knuth()
hist(x)
hist(r)
library(rgl)
install.packages("rgl")
install.packages("scatterplot3d")
library(scatterplot3d)
R <- matrix(r, nrows = 3)
R <- matrix(r, nrow = 3)
x <- R[1, ]; y <- R[2, ]; t <- R[3, ]
str(R)
scatterplot3d(x, y, z)
z <- R[3, ]
scatterplot3d(x, y, z)
N <- 3000; r <- numeric(N)
for (i in 1:N) r[i] <- knuth()
hist(r)
# library(scatterplot3d)
R <- matrix(r, nrow = 3)
x <- R[1, ]; y <- R[2, ]; z <- R[3, ]
scatterplot3d(x, y, z, col=darkblue)
?scatterplot3d
scatterplot3d(x, y, z, color=darkblue)
scatterplot3d(x, y, z, color="darkblue")
scatterplot3d(x, y, z, pch='.', color="darkblue")
scatterplot3d(x, y, z, pch='.', color="darkblue", cex.symbols=3)
scatterplot3d(x, y, z, pch='.', color="darkblue", cex.symbols=5)
scatterplot3d(x, y, z, pch='.', color="darkblue", cex.symbols=4)
scatterplot3d(x, y, z, pch='.', color="darkred", cex.symbols=4)
scatterplot3d(x, y, z, pch='.', color="blue", cex.symbols=4)
knitr::opts_chunk$set(echo = TRUE)
scatterplot3d(x, y, z, pch='.', color="blue", cex.symbols=4)
scatterplot3d(x, y, z, pch='.', color="blue", cex.symbols=4)
